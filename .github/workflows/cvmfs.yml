name: Auto GAT CVMFS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true

      # BEGIN Dependencies
      - uses: actions/setup-python@v2
        with:
          python-version: '3.7'
          architecture: 'x64'
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7"
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - uses: actions/cache@v2
        with:
          path: |
            vendor/bundle
            node_modules
            ~/.cache/pip
            ~/.npm
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: |
            sudo apt install -y ffmpeg pv fonts-dejavu-core fonts-dejavu-extra  libx11-dev libxi-dev libxext-dev libglx-dev libglu1-mesa-dev freeglut3-dev mesa-common-dev tree

      - name: Install NodeJS dependencies
        run: |
            npm i
            FFMPEG_PATH=$(echo "const ffmpeg = require('ffmpeg-static');console.log(ffmpeg.split('/').slice(0, -1).join('/'));" | node -)
            echo "Located FFMPEG at $FFMPEG_PATH"
            export PATH="$FFMPEG_PATH:$PATH"

      - name: Install python dependencies
        run: |
            pip install -r requirements.txt

      - name: Install playwright dependencies
        run: |
            # System deps, mostly for video recording
            # Playwright stuff
            npx playwright install-deps chromium

      - name: Provision git-gat
        run: |
            # git-gat
            git clone https://github.com/hexylena/git-gat/ ~/galaxy/
            echo 'password' > ~/galaxy/.vault-password.txt;
      # END Dependencies

      - name: Auth to asciinema
        run: |
            mkdir -p ~/.config/asciinema/
            echo "${ASCIINEMA_KEY}" >> ~/.config/asciinema/install-id
        env:
            ASCIINEMA_KEY: ${{ secrets.ASCIINEMA_KEY }}

      - name: Configure AWS credentials for Polly
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_POLLY_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_POLLY_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Test AWS
        run: |
            ruby gat2video/ari-synthesize.rb --aws -f <(echo "G'day mate") --voice=Olivia --lang=en-AU

      - name: Setup Ansible
        run: |
            echo 'password' > ~/.vault-password.txt;

            cat > ~/.extra.yml <<-EOF
            nginx_ssl_role: galaxyproject.self_signed_certs
            openssl_self_sign: true
            openssl_domains: "{{ certbot_domains }}"

            # These need to be re-defined for some reason?
            openssl_certificate_path: "/etc/ssl/certs/{{ openssl_domains[0] }}.crt"
            openssl_private_key_path: "/etc/ssl/private/{{ openssl_domains[0] }}.pem"

            nginx_conf_ssl_certificate: "{{openssl_certificate_path}}"
            nginx_conf_ssl_certificate_key: "{{ openssl_private_key_path }}"

            # Using hash-merge it should work?
            galaxy_config:
              galaxy:
                master_api_key: adminkey
            EOF

            cat > ~/.hosts <<-EOF
            [galaxyservers]
            $(hostname -f) ansible_connection=local ansible_user=$(whoami)
            [pulsarservers]
            $(hostname -f) ansible_connection=local ansible_user=$(whoami)
            EOF

            cat > ~/.ansible.cfg <<-EOF
            [defaults]
            interpreter_python = /usr/bin/python3
            inventory = ~/.hosts
            retry_files_enabled = false
            vault_password_file = ~/.vault-password.txt
            EOF

      - name: Download script
        run: |
            python gat2video/download-script.py cvmfs --branch video-final
            cat cvmfs.script

      - name: Get Git-Gat up to speed
        run: |
            cd ~/galaxy/
            git checkout $(python "$GITHUB_WORKSPACE"/gat2video/find-step.py cvmfs | head -n 1)
            ansible-galaxy install -r requirements.yml -p roles
            ansible-galaxy install galaxyproject.self_signed_certs
            echo password > .vault-password.txt
            ANSIBLE_HASH_BEHAVIOUR=merge ansible-playbook galaxy.yml -e @~/.extra.yml
            pip install ephemeris
            export CURL_CA_BUNDLE=""
            shed-tools install -g https://$(hostname -f) -a adminkey --name bwa --owner devteam --section_label Mapping

      - name: Rewrite ansible configuration to non-toxic volatile nonsense.
        run: |
            cat > ~/.extra.yml <<-EOF
            nginx_ssl_role: galaxyproject.self_signed_certs
            openssl_self_sign: true
            openssl_domains: "{{ certbot_domains }}"

            # These need to be re-defined for some reason?
            openssl_certificate_path: "/etc/ssl/certs/{{ openssl_domains[0] }}.crt"
            openssl_private_key_path: "/etc/ssl/private/{{ openssl_domains[0] }}.pem"

            nginx_conf_ssl_certificate: "{{openssl_certificate_path}}"
            nginx_conf_ssl_certificate_key: "{{ openssl_private_key_path }}"
            EOF

      - name: Record & Upload
        shell: 'script --return --quiet --command "bash {0}"'
        run: |
          stty cols 64 rows 16
          cd "$GITHUB_WORKSPACE"
          python gat2video/video-builder.py cvmfs.script cvmfs


          #asciinema rec gh.cast -c ./demo.sh -t "Automated Github Recording $(date)"
          #./asciinema-edit quantize --range 5 gh.cast > gh-short.cast
          #asciinema upload gh-short.cast
        env:
            TERM: xterm

      - name: Generate final video
        run: |
            # Generate final.mp4
            xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" $(npm bin)/editly editly.json
            # Generates a final.srt
            python gat2video/offset-subs.py
            # Resync just in case.
            ffs final.mp4 -i final.srt -o final.en.srt

      - name: Build final asciinema cast and upload
        run: |
            # Asciinema
            wget https://github.com/cirocosta/asciinema-edit/releases/download/0.0.6/asciinema-edit_0.0.6_linux_amd64.tar.gz
            tar xvfz asciinema-edit_0.0.6_linux_amd64.tar.gz

            # Merge all of them using our amazingly sub-optimal script
            python gat2video/asciinema-cat.py output/*cast --title "GAT/CVMFS Command Line: Auto-GAT $(date '+%Y %B %d')"> final.cast

            # Then quantize that to remove long pauses
            ./asciinema-edit quantize --range 5 scene-final.cast > scene-final-quant.cast

            # And upload!
            asciinema upload scene-final-quant.cast

      - name: Backup our files
        if: always()
        run: |
          aws s3 sync "${GITHUB_WORKSPACE}" s3://galaxy-training/auto-gat/ --exclude '*' --include 'scene*.cast' --include 'scene*.json' --include 'video*' --include 'final.*'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
