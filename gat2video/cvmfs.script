{"meta": {"title": "Reference Data with CVMFS", "contributors": ["slugger70", "hexylena"], "voice": {"id": "Olivia", "lang": "en-AU", "neural": true}}, "steps": [{"type": "spoken", "text": "These words come from a transcript of Simon Gladman teaching this course. He is a bioinformatician at the University of Melbourne in Australia and also one of the administrators of Galaxy Australia. Hello everybody and welcome back to the Galaxy administrators course. in this session we're going to be talking about reference data in Galaxy using CVMFS. Hopefully by now you've all seen the video of the slides - if not I suggest you go and do look at those first as that explains how reference data works in Galaxy and also what CVMFS does to help us with that reference data. Some of the requirements from that we hope you've already completed: Galaxy server installation with Ansible and hopefully you understand what Ansible is and how it's used.", "data": {"visual": "gtn", "target": "#top-navbar"}}, {"type": "spoken", "text": "All right, just a quick recap. CVMFS or Cern-VMFS is a distributed file system perfectly designed for sharing read-only data across the globe and we use it extensively in the Galaxy project for sharing things that a lot of Galaxy servers need. Namely all the reference data; so the genome sequences for all the different genomes that we need to think about in in Galaxy and bioinformatics. Things like a human genome, mouse genome, etc., etc. And we need a lot of indices for the genome sequences and lots of tool indices for all those genomes. And we also have a repository that contains tool containers. So singularity containers for all of the bioinformatics tools that we might want to use. There's a tutorial idea already done this week or coming up soon this week that explains how to use those singularity containers within Galaxy as well. So we're just going to get on with things.", "data": {"visual": "gtn", "target": "#cvmfs-quote"}}, {"type": "spoken", "text": "The agenda we're going to follow today is: We're going to install and configure Galaxy CVMFS reference data using ansible. We're going to explore the CVMFS installation and then we're going to configure Galaxy to use it.", "data": {"visual": "gtn", "target": "#agenda"}}, {"type": "spoken", "text": "There are a few different repositories that um Galaxy project has created and shared with everybody. The first one is the reference data and indices and this is in data.galaxyproject.org. And then we have another one called singularity.galaxyproject.org. If you want to have a look at what's in there you can click on the \"data cache\", and this link here will show you all the things that are inside this data.galaxyproject.org", "data": {"visual": "gtn", "target": "#ansible-cvmfs-and-galaxy"}}, {"type": "spoken", "text": "Okay, so now we're going to move on to installing and configuring Galaxy's CVMFS reference data with Ansible. We are going to do some Ansible here and we're going to install CVMFS onto our Galaxy server. Hopefully you all have access to a Galaxy server.", "data": {"visual": "gtn", "target": "#installing-and-configuring"}}, {"type": "spoken", "text": "Here is mine. And on it I am an admin user and I have access to the admin page. This was done as part of the installation of Galaxy um and hopefully you've installed a tool.", "data": {"visual": "galaxy", "target": "/", "action": "goto"}}, {"type": "spoken", "text": "I have bwa and bwa-mem installed under Mapping.", "data": {"visual": "galaxy", "target": ".search-input input", "action": "fill", "value": "bwa-mem"}}, {"type": "spoken", "text": "So if I click on that you can see here that I have bwa-mem but there are no options available for reference genomes, so we want to fix that. We want to connect to all of Galaxy's pre-built references and so we're going to use Galaxy's CVMFS system to let our own Galaxies connect and get access to all the pre-built caches and everything we already have.", "data": {"visual": "galaxy", "target": "/?tool_id=bwa_mem", "action": "goto"}}, {"type": "spoken", "text": "Okay, so let's get started. If we go back to our tutorial here, it says that we need to install a CVMFS role into our requirements.yml and then add it to our Ansible.", "data": {"visual": "gtn", "target": "#hands_on-hands-on-installing-cvmfs-with-ansible"}}, {"type": ["code", "spoken"], "code": "--- a/requirements.yml\n+++ b/requirements.yml\n@@ -18,3 +18,5 @@\n   version: 048c4f178077d05c1e67ae8d9893809aac9ab3b7\n - src: gantsign.golang\n   version: 2.6.3\n+- src: galaxyproject.cvmfs\n+  version: 0.2.13", "data": {"commit": "Add requirement", "visual": "terminal"}, "text": "Okay, so the first thing I'm going to do is I'm going to add the CVMFS role to the requirements.yml. Edit requirements.yml and we need to add this to the bottom of that file. Copy. Paste. And save it."}, {"type": "spoken", "text": "Well the first thing I need to do is log into my Galaxy machine in the terminal.", "data": {"visual": "terminal", "cmd": "whoami; hostname -f"}}, {"type": "spoken", "text": "Have a look at he contents of this directory and I'll go into galaxy and here we have all of the Ansible scripts that hopefully everybody already has.", "data": {"visual": "terminal", "cmd": "ls -al"}}, {"type": ["cmd", "spoken"], "cmd": "ansible-galaxy install -p roles -r requirements.yml", "data": {"cmd": "true", "visual": "terminal"}, "text": "And now install the role into our local Ansible scripts using the ansible-galaxy command. And as you can see, it's downloading the CVMFS role."}, {"type": "spoken", "text": "And if we look into roles now you can see that we have galaxyproject.cmfs", "data": {"visual": "terminal", "cmd": "ls roles/"}}, {"type": "spoken", "text": "Right, clear the screen.", "data": {"visual": "terminal", "cmd": "clear"}}, {"type": ["code", "spoken"], "code": "--- /dev/null\n+++ b/group_vars/all.yml\n@@ -0,0 +1,4 @@\n+# CVMFS vars\n+cvmfs_role: client\n+galaxy_cvmfs_repos_enabled: config-repo\n+cvmfs_quota_limit: 500", "data": {"commit": "Configure CVMFS variables", "visual": "terminal"}, "text": "So what we're going to do, is we're going to create a new file called groupvars/all.yml and we're going to put some of these CVMFS variables inside it. So i'll just copy that. Okay, groupvars all dot yaml. And I'll paste this in. So basically the CVMFS role we want this machine to have is client. Which means that we just want it to be able to access all of our CVMFS reference data. And then we want we're going to set this one here to say that, \"yes we want to set this up for Galaxy.\" And the config repo is the one that tells CVMFS how to set everything else up. And then this is the other important one - the CVMFS quota limit. We're setting to 500 megabytes and that's just so we don't fill the root disk of these machines. So I'll save that."}, {"type": "spoken", "text": "Okay, now what we need to do is we need to run this role and that will install the CVMFS client onto our Galaxy server. So the first thing we need to do is edit our group files galaxyservers file. There are a bunch of different variables that we can set. We can set the cvmfs role to be a client or stratum zero, stratum one server. URLs - so where we're getting all this data from, and if you remember in the slideshow, the data can come from Europe or America or Australia. Which repositories we want to have installed. And this is an important one - the quota limit. This is basically saying that CVMFS will cache some data on your local machine and the quota limit is the maximum size of that cache.", "data": {"visual": "gtn", "target": "#variables-table"}}, {"type": "spoken", "text": "Okay but instead of just modifying galaxyservers.yml and adding in some of these variables - instead what we're going to do here is - we're going to create a new group file called all.yml. Because one of the things that we may want to do in the future - is we may want to create other machines. We might want to have worker nodes for our Galaxy cluster; or we may want to have other machines that we want to be able to create using these Ansible scripts that also have the CVMFS role installed. And instead of reproducing these variables in each of the group var files for those particular machines, we can create a special group vars file called all.yml. And whatever we put in there will be automatically available to all machines that we create with Ansible from this directory. Hopefully that makes a bit of sense and we're going to use that a bit later on if you come along to the pulsar tutorial where we will also be installing CVMFS on another machine - on a remote machine to run Pulsar.", "data": {"visual": "terminal", "cmd": "ls group_vars/"}}, {"type": ["code", "spoken"], "code": "--- a/galaxy.yml\n+++ b/galaxy.yml\n@@ -22,3 +22,4 @@\n       become_user: \"{{ galaxy_user.name }}\"\n     - galaxyproject.nginx\n     - galaxyproject.tusd\n+    - galaxyproject.cvmfs", "data": {"commit": "Add role to playbook", "visual": "terminal"}, "text": "And now we need to add the role - we need to add the role to our Galaxy playbook. So we edit galaxy.yml which is our playbook and we just need to add the galaxyproject.cvmfs to the bottom of this. galaxyproject.cvmfs. And that's pretty much it."}, {"type": ["cmd", "spoken"], "cmd": "ansible-playbook galaxy.yml", "data": {"cmd": "true", "visual": "terminal"}, "text": "Okay now we just run the playbook. ansible-playbook. We want to run the Galaxy one. So. All right, we're about to get to the CVMFS repo here. We are now it's installing the um the apt package of CVMFS. It's going to get that out of this special um Cern apt repository. Okay, it's installing it. Hopefully it won't take too long. Okay, now setting up the repositories. And it's done."}, {"type": "spoken", "text": "Okay, that was completed. We've now installed CVMFS client onto our machine and we've told it to go looking for certain repositories. Now to get access to them. We'll see what's in them. uh They'll be located at slash cvmfs. So under the cvmfs directory in your root directory. So, we can go to that. cd /", "data": {"visual": "terminal", "cmd": "cd /"}}, {"type": "spoken", "text": "Do an ll. You can see here there's a directory here called cvmfs.", "data": {"visual": "terminal", "cmd": "ls -al"}}, {"type": "spoken", "text": "So we'll go in there and have a look and see what's in there.", "data": {"visual": "terminal", "cmd": "cd /cvmfs"}}, {"type": "spoken", "text": "So let's have a look. Oh there's nothing in there! Well actually, what what's going to happen is; as soon as we go looking for something in this directory, so autofs will automatically mount the particular thing we're looking for. And so what we're going to do here is I'm going to go: cd data.galaxyproject.org, because I know that's one of the one of the repositories that should have been installed.", "data": {"visual": "terminal", "cmd": "ls -al"}}, {"type": "spoken", "text": "And when I do that, autofs is automatically going to mount it for me on the fly. Like that.", "data": {"visual": "terminal", "cmd": "cd data.galaxyproject.org"}}, {"type": "spoken", "text": "And now I've cd'd into it and if I do an ll, you can see here I've got some things in here now. I've got byhand and managed.", "data": {"visual": "terminal", "cmd": "ls -al"}}, {"type": "spoken", "text": "If I go into byhand you can see here that I have quite a lot of different genomes and their tool indices.", "data": {"visual": "terminal", "cmd": "cd byhand; ls"}}, {"type": "spoken", "text": "So if I'm going to, say, sacCer2, I can see in here there are bowtie index, the bwa index, the uh the picard index, the sam index; a whole bunch of other different things - including the original sequences etc. So yeah, quite a lot of data and we just have access to that on the fly. And then as soon as we try and look at any of these files, what will happen is CVMFS will automatically cache it to the local disk within within that 500 megabyte cache that we uh we set up earlier. This is really cool. And we can tell Galaxy to look at all of this data and use it as its reference data.", "data": {"visual": "terminal", "cmd": "ls -al sacCer2/"}}, {"type": "spoken", "text": "So that's what we're going to do now. Okay. So now we're going to try and configure Galaxy to use this CVMFS data. And and to have it so that we can run things like bwa and bwa mem and run them against the human genome or the bee genome or the mouse genome and take advantage of the fact that a lot of other people in the Galaxy community have done a lot of work for reference data for us already. So the way to do this is we're going to edit the groupvars galaxyservers file and we're going to add a variable called tool_data_table_config_path. And then we're going to point it to the two files that are in - there's one in byhand and one in managed.", "data": {"visual": "gtn", "target": "#spoken-7"}}, {"type": "spoken", "text": "If we go into byhand you can see here. And then we're going to location. As you can see in here, are all the lock files, but you'll also see there's an xml file here called tool_data_table_conf xml and we're going to point Galaxy at this file and there's another one in the same position in managed.", "data": {"visual": "terminal", "cmd": "cd /cvmfs/data.galaxyproject.org/byhand;  ls location;"}}, {"type": "spoken", "text": "And you can see here there's another one in managed there. And so we're going to add both of these files to our Galaxy configuration and then Galaxy will be able to use all of the data contained within this repository.", "data": {"visual": "terminal", "cmd": "cd ../; ls managed/location"}}, {"type": "spoken", "text": "Okay, so we'll go back to our Ansible directory.", "data": {"visual": "terminal", "cmd": "cd ~/galaxy/"}}, {"type": ["code", "spoken"], "code": "--- a/group_vars/galaxyservers.yml\n+++ b/group_vars/galaxyservers.yml\n@@ -29,6 +29,7 @@ miniconda_manage_dependencies: false\n \n galaxy_config:\n   galaxy:\n+    tool_data_table_config_path: /cvmfs/data.galaxyproject.org/byhand/location/tool_data_table_conf.xml,/cvmfs/data.galaxyproject.org/managed/location/tool_data_table_conf.xml\n     dependency_resolvers_config_file: \"{{ galaxy_config_dir }}/dependency_resolvers_conf.xml\"\n     containers_resolvers_config_file: \"{{ galaxy_config_dir }}/container_resolvers_conf.xml\"\n     brand: \"\ud83e\uddec\ud83d\udd2c\ud83d\ude80\"", "data": {"commit": "Add tool_data_table_config_path to group variables", "visual": "terminal"}, "text": "This time I'm going to edit the groupvars galaxyservers.yml file. And in our Galaxy section. Which is here. Which is here. At the bottom of that I'm going to add a variable called tool_data_table_config_path. And I'm going to point it to the locations that we um I showed you before. um I can't remember what they are off the top of my head but luckily they're inside this solution box and so I will just copy them. And paste. And as you can see pointing to /cvmfs/data.galaxyproject.org/byhand/location and then that tool data table conf xml file. And then we have a list here and we separate it by commas and then we point it to the second one. Right, so we save this file."}, {"type": ["cmd", "spoken"], "cmd": "ansible-playbook galaxy.yml", "data": {"cmd": "true", "visual": "terminal"}, "text": "So this time what we're going to do, all we're doing is making a minor change to the Galaxy yaml file in the Galaxy config to add that one line and then we're going to restart Galaxy. And yeah, Galaxy will suddenly automatically have access to all of that data. So you can see here we've changed the Galaxy configuration file. And then Galaxy is now restarting and it's done."}, {"type": "spoken", "text": "Okay let's go and have a look at our Galaxy server and see if bwa can suddenly see all of those - that stuff. All right so we're back on our Galaxy server. I'll click on Analyze Data to just to reload the page.", "data": {"visual": "galaxy", "target": "#analysis a", "action": "click"}}, {"type": "spoken", "text": "I'll go back to Mapping", "data": {"visual": "galaxy", "target": ".search-input input", "action": "click"}}, {"type": "spoken", "text": "and load bwa-mem.", "data": {"visual": "galaxy", "target": ".search-input input", "action": "fill", "value": "bwa-mem"}}, {"type": "spoken", "text": "And then suddenly, instead of having no options available, you can see here we've got the Bee genome.", "data": {"visual": "galaxy", "target": "/?tool_id=bwa_mem", "action": "goto"}}, {"type": "spoken", "text": "Now click on that. Oh look at that, there are lots and lots and lots of available genomes now including: lots of human, mouse, rat, yeast, all sorts of things. And in fact if you want to see the list of all the different available genomes now, that we have available to us. If you go to admin. We go to data tables over here. You can see here that we have um a couple of data tables for managed and for all fasta. So if we click on that one, you can see that we have a lot of genomes available now in the all fasta data table that Galaxy can get access to. If we go back to the data tables again, and go down to bwa indexes or bwa mem indexes here. You can see we have access to a lot of pre-built indexes for bwa for all of these different genomes. That is pretty powerful. So what did that take us? Maybe 30 minutes? And uh suddenly our Galaxy server has access to all the uh the data the reference data and the tool indices that the community have built over a number of years and it's super simple.", "data": {"visual": "galaxy", "target": "s2id_field-uid-12_select a", "action": "click"}}, {"type": "spoken", "text": "Right, we'll go back to our tutorial. um Yeah. Just finally, just before we finish up. um If we are developing a new tool and you want to add a reference genome or a different index just give us - drop us a line on Gitter and we'll be able to add it into our - into the reference data for the community. um We're looking at automating the process of building all of this material using data managers and ephemeris. And we're working with a group of people called the IDC, which is the Intergalactic Data Commission, which is a funny name for everyone in Galaxy - in the Galaxy community who likes reference data. And we're looking at making a community controlled resource that will be semi-automatic. One of the other things that you can do is have automatic fallbacks. So, if say, you're in Australia and you're hooked up to the Australian mirror of the CVMFS repository and the Australian mirror dies, the CVMFS client is smart enough to automatically go to the next closest one and so you won't lose anything. If you're interested in looking at plant data there's a link here for that.", "data": {"visual": "gtn", "target": "#other-aspects"}}, {"type": "spoken", "text": "And finally if you could please click on this link here and give us some feedback on how you think the tutorial went, whether it was useful, if you enjoyed it or um if you have any criticisms, could you please put them in here as well. And if you end up using this to build a Galaxy server and you publish that Galaxy server um could you cite the tutorial for us please. That would be make a big difference to us. All right, thank you very much and I hope you enjoyed it and hopefully I'll get to meet some of you in person one day soon at a Galaxy conference. Thank you and goodbye.", "data": {"visual": "gtn", "target": "#feedback"}}]}